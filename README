libo provides a set of integer arithmetic functions with overflow
detection.  For example, smulo32(a, b, &c) stores the result of
signed multiplication a * b to c and returns 0 if no overflow
happens.

#include <stdio.h>
#include <stdlib.h>

_Bool smulo32(int, int, int *);

int main(int argc, char **argv)
{
	int a = atoi(argv[1]);
	int b = atoi(argv[2]);
	int c;
	if (smulo32(a, b, &c))
		printf("overflow!\n");
	else
		printf("%d\n", c);
}

Instead of implementing those functions for each architecture, libo
is generated automatically via LLVM backends.  See the files in
the `generated' directory for details.
